{\rtf1\ansi\deff0
{\fonttbl{\f0 Arial;}}
\fs24
\b Kaufmann Health – API Tool Design Document\b0\par
Version: 1.0 \tab Date: 2025-08-28\par
\par
\b 1. Overview\b0\par
This document describes the design of the Kaufmann Health server-side API tool that powers lead intake, logging/analytics, transactional email, and Google Ads Enhanced Conversions. The design prioritizes security and privacy (no client tracking cookies), operational simplicity, and testability.\par
\par
Key goals:\par
\tab\bullet\tab Keep DB writes and secrets on the server only.\par
\tab\bullet\tab Provide consistent API responses: {data, error}.\par
\tab\bullet\tab Observability via unified event logger with PII minimization.\par
\tab\bullet\tab Cookie-less Google Ads attribution via Enhanced Conversions (hashed email).\par
\par
\b 2. Architecture & Data Flow\b0\par
Runtime: Next.js App Router, API routes in \i src/app/api/*\i0 executed on Node.js runtime where secrets are required.\par
Storage: Postgres (Supabase).\par
Logging: Unified events table via Supabase REST (server-side).\par
Emails: Resend HTTP API.\par
Attribution: Server-parsed referer/UTM only; no tracking cookies.\par
\par
Flow (example: lead submission):\par
\tab\bullet\tab Client submits form to POST /api/leads.\par
\tab\bullet\tab Server validates and rate-limits by IP (best-effort).\par
\tab\bullet\tab Insert lead into public.people (with metadata).\par
\tab\bullet\tab Fire-and-forget side-effects: transactional email(s), Google Ads conversion upload, internal notification, unified logging.\par
\par
\b 3. API Endpoints\b0\par
\b 3.1 POST /api/leads\b0\par
Purpose: intake patient or therapist leads.\par
Request (subset): name, \b email\b0, phone, notes, city, issue, availability, budget, specializations (slugs), session_preference (online|in_person), type (patient|therapist), qualification, experience, website, session_id.\par
Validation: email format; sanitize strings; allowed specializations only (narm|core-energetics|hakomi|somatic-experiencing).\par
Rate limiting: DB-backed best-effort (<=1 per 60s per IP) by querying recent rows whose metadata.ip matches.\par
Writes: insert into public.people with flexible metadata bag.\par
Side-effects (fire-and-forget):\par
\tab\bullet\tab Therapist: auto-creates \i therapist_contracts\i0 record (stores hashed IP and UA);
sends welcome email.\par
\tab\bullet\tab Patient: sends confirmation email (German), including submitted details.\par
\tab\bullet\tab Google Ads: uploads Enhanced Conversion with alias/value (therapist_registration=€25; patient_registration=€10) and \i orderId\i0 = inserted lead id.\par
\tab\bullet\tab Internal notification (PII-free) to operator mailbox (optional).\par
Response: { data: { id }, error: null } on success; otherwise { data: null, error }.\par
\par
\b 3.2 POST /api/events\b0\par
Purpose: minimal client/server event tracking.\par
Behavior: validates \b type\b0; merges server-attributed referer/UTM; logs via unified logger. Returns { data: { received: true }, error: null }.\par
\par
\b 3.3 POST /api/admin/login\b0\par
Purpose: password-protected admin session creation.\par
Security: in-memory fixed-window rate limit (10 req/min/IP). Compares provided password to ADMIN_PASSWORD env. On success sets HttpOnly session cookie under /admin path. Tracks success/failure/rate-limit via unified logger.\par
\par
\b 4. Data Model (why-focused)\b0\par
public.people: lead/contact with flexible metadata (city, issue, availability, budget, session_preference, specializations, ip, user_agent, funnel_type, submitted_at). Flexible JSONB avoids premature schema churn.\par
public.events: unified, PII-minimized log for analytics/ops; stores level, type, properties (sanitized/truncated), hashed_ip, user_agent. Service role inserts only.\par
\par
\b 5. Security & Privacy Decisions\b0\par
\tab\bullet\tab Server-only writes: Service role Supabase client used only in server routes; keys never exposed to browser.\par
\tab\bullet\tab Node.js runtime for secret-using routes (not Edge).\par
\tab\bullet\tab PII minimization: events log stores hashed IP (sha256(IP_HASH_SALT + ip)). No raw emails in logs.\par
\tab\bullet\tab Cookie policy: no tracking cookies on public site; attribution relies on referer/UTM only.\par
\tab\bullet\tab Google Ads Enhanced Conversions: uploads \b hashed email\b0 only; conversion action names are configured via env to avoid hardcoding resource IDs.\par
\tab\bullet\tab Emails: transactional only; sends via Resend with domain-authenticated From address.\par
\par
\b 6. Rate Limiting\b0\par
Leads: best-effort 60s per IP using DB lookup (robust across multi-instance).\par
Admin login: in-memory fixed window (10 req/min/IP); sufficient for MVP. Consider external store if horizontal scaling adds multiple instances.\par
\par
\b 7. Observability & Error Handling\b0\par
Unified logger writes to public.events via Supabase REST using service role. Properties sanitized (depth/size-limited). Errors normalized (name/message/stack truncated). All API routes return {data, error}. Side-effects are fire-and-forget and never block the primary response.\par
\par
\b 8. External Integrations\b0\par
\ul Resend (Email)\ul0 : Thin HTTP wrapper; no-ops when RESEND_API_KEY missing; logs email_sent on success; logs error with context on failure.\par
\ul Google Ads Enhanced Conversions\ul0 : OAuth2 refresh-token flow to obtain access token; uses \i uploadUserData\i0 (v17). Uploads userIdentifiers (hashedEmail) + transaction attributes. Safety: full no-op unless env configured; missing action mappings are logged as errors; success metrics logged.\par
\par
\b 9. Environment Variables (server unless noted)\b0\par
Core: NEXT_PUBLIC_SUPABASE_URL (public), NEXT_PUBLIC_SUPABASE_ANON_KEY (public), SUPABASE_SERVICE_ROLE_KEY, NEXT_PUBLIC_BASE_URL (public).\par
Admin: ADMIN_PASSWORD.\par
Privacy: IP_HASH_SALT.\par
Email: RESEND_API_KEY, LEADS_FROM_EMAIL, LEADS_NOTIFY_EMAIL.\par
Google Ads: GOOGLE_ADS_CLIENT_ID, GOOGLE_ADS_CLIENT_SECRET, GOOGLE_ADS_REFRESH_TOKEN, GOOGLE_ADS_DEVELOPER_TOKEN, GOOGLE_ADS_CUSTOMER_ID, GOOGLE_ADS_LOGIN_CUSTOMER_ID (optional).\par
Conversion mapping: GOOGLE_ADS_CA_PATIENT_REGISTRATION, GOOGLE_ADS_CA_THERAPIST_REGISTRATION, GOOGLE_ADS_CA_MATCH_REQUEST, GOOGLE_ADS_CA_SUCCESSFUL_MATCH, GOOGLE_ADS_CA_PAYMENT_COMPLETED, GOOGLE_ADS_CA_PROFILE_COMPLETION, GOOGLE_ADS_CA_FIRST_CONTACT.\par
\par
\b 10. Testing & Quality\b0\par
Vitest-based tests cover API routes, logger behavior, email templates, Google Ads tracker (hashing, alias mapping, no-op), and the leads-to-conversion flow. CI runs tests and lint; production build validated locally.\par
\par
\b 11. Performance & Non-Functional\b0\par
\tab\bullet\tab Logger clamps property sizes and depth to keep requests small.\par
\tab\bullet\tab Email and Ads uploads are async; primary API latency dominated by DB insert only.\par
\tab\bullet\tab No client-side tracking code required for conversions (server-only).\par
\par
\b 12. Future Work\b0\par
\tab\bullet\tab Add Upstash or hCaptcha if lead abuse appears.\par
\tab\bullet\tab Add public.people(metadata) GIN index for faster IP lookups under load.\par
\tab\bullet\tab Wire additional conversions (match_request, successful_match, payment) when those flows are server-confirmed and email is available.\par
\tab\bullet\tab Expose minimal internal dashboard for event logs and conversion upload results.\par
\par
\b Appendix A – Allowed Specializations\b0\par
narm, core-energetics, hakomi, somatic-experiencing.\par
\par
\b Appendix B – Conversion Alias Mapping (Why)\b0\par
Aliasing allows renaming or swapping Google Ads conversion actions without code changes. Aliases are resolved via env keys (e.g., \i patient_registration\i0 -> GOOGLE_ADS_CA_PATIENT_REGISTRATION).\par
}
